Here‚Äôs a comprehensive guide to **Axios essentials for React developers**, covering everything you need to know ‚Äî including **installation**, **basic usage**, **best practices**, **folder structure**, and **code examples**.

---

## ‚úÖ What is Axios?

Axios is a promise-based HTTP client for the browser and Node.js. It‚Äôs widely used in React projects for making API requests.

---

## üì¶ Installation

```bash
npm install axios
# or
yarn add axios
```

---

## üìÅ Suggested Folder Structure

```
src/
‚îú‚îÄ‚îÄ api/
‚îÇ   ‚îú‚îÄ‚îÄ axiosInstance.ts      // Axios instance with base config
‚îÇ   ‚îî‚îÄ‚îÄ endpoints.ts          // Define API endpoints
‚îÇ   ‚îî‚îÄ‚îÄ userApi.ts            // Feature-specific API functions
‚îú‚îÄ‚îÄ hooks/
‚îÇ   ‚îî‚îÄ‚îÄ useUsers.ts           // Custom hooks using the APIs
‚îú‚îÄ‚îÄ pages/
‚îÇ   ‚îî‚îÄ‚îÄ UsersPage.tsx         // Component calling the hook
‚îî‚îÄ‚îÄ App.tsx
```

---

## üõ†Ô∏è Step-by-Step Setup

### 1. `axiosInstance.ts` ‚Äî Centralized Axios Configuration

```ts
// src/api/axiosInstance.ts
import axios from 'axios';

const axiosInstance = axios.create({
  baseURL: 'https://api.example.com',
  timeout: 10000, // 10 seconds timeout
  headers: {
    'Content-Type': 'application/json',
  },
});

// Optional: Add request/response interceptors
axiosInstance.interceptors.request.use(
  (config) => {
    // Example: attach token
    const token = localStorage.getItem('authToken');
    if (token) config.headers.Authorization = `Bearer ${token}`;
    return config;
  },
  (error) => Promise.reject(error)
);

axiosInstance.interceptors.response.use(
  (response) => response,
  (error) => {
    // Global error handler
    if (error.response?.status === 401) {
      // logout or redirect
    }
    return Promise.reject(error);
  }
);
 
export default axiosInstance;
```

---

### 2. `endpoints.ts` ‚Äî Define Endpoint Constants (optional but cleaner)

```ts
// src/api/endpoints.ts
export const USERS_ENDPOINT = '/users';
```

---

### 3. `userApi.ts` ‚Äî Feature-Specific API Functions

```ts
// src/api/userApi.ts
import axiosInstance from './axiosInstance';
import { USERS_ENDPOINT } from './endpoints';

export const getAllUsers = () => {
  return axiosInstance.get(USERS_ENDPOINT);
};

export const getUserById = (id: string) => {
  return axiosInstance.get(`${USERS_ENDPOINT}/${id}`);
};

export const createUser = (userData: any) => {
  return axiosInstance.post(USERS_ENDPOINT, userData);
};

export const updateUser = (id: string, userData: any) => {
  return axiosInstance.put(`${USERS_ENDPOINT}/${id}`, userData);
};

export const deleteUser = (id: string) => {
  return axiosInstance.delete(`${USERS_ENDPOINT}/${id}`);
};
```

---

### 4. `useUsers.ts` ‚Äî Use in a React Hook (with `useEffect` or `react-query`)

#### Option A: Using `useEffect`

```tsx
// src/hooks/useUsers.ts
import { useEffect, useState } from 'react';
import { getAllUsers } from '../api/userApi';

export const useUsers = () => {
  const [users, setUsers] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    getAllUsers()
      .then((res) => setUsers(res.data))
      .catch((err) => setError(err.message))
      .finally(() => setLoading(false));
  }, []);

  return { users, loading, error };
};
```

#### Option B: Using `react-query` (recommended for complex apps)

```bash
npm install @tanstack/react-query
```

```tsx
// src/hooks/useUsers.ts
import { useQuery } from '@tanstack/react-query';
import { getAllUsers } from '../api/userApi';

export const useUsers = () => {
  return useQuery(['users'], () => getAllUsers().then(res => res.data));
};
```

---

### 5. `UsersPage.tsx` ‚Äî Use Hook in React Component

```tsx
// src/pages/UsersPage.tsx
import React from 'react';
import { useUsers } from '../hooks/useUsers';

const UsersPage = () => {
  const { users, loading, error } = useUsers();

  if (loading) return <p>Loading...</p>;
  if (error) return <p>Error: {error}</p>;

  return (
    <ul>
      {users.map((user) => (
        <li key={user.id}>{user.name}</li>
      ))}
    </ul>
  );
};

export default UsersPage;
```

---

## üß† Best Practices

| Tip                                | Description                                         |
| ---------------------------------- | --------------------------------------------------- |
| ‚úÖ Centralize config                | Use a single `axiosInstance.ts` for maintainability |
| ‚úÖ Use TypeScript                   | Define proper interfaces for request/response       |
| ‚úÖ Use async/await                  | Improves readability                                |
| ‚úÖ Handle errors                    | Use interceptors and local error handling           |
| ‚úÖ Use react-query                  | For caching, retries, and auto-refetching           |
| ‚úÖ Avoid repeating URL              | Use constants for endpoints                         |
| ‚úÖ Use hooks                        | Abstract fetching logic into reusable hooks         |
| ‚ùå Avoid direct axios in components | Keeps components clean and focused on UI            |

---

## üîí Token Handling

Handled in `axiosInstance` via `interceptors`. Add/remove tokens from localStorage or use React Context to manage auth tokens.

---

## üì§ File Upload Example

```ts
export const uploadAvatar = (file: File) => {
  const formData = new FormData();
  formData.append('avatar', file);

  return axiosInstance.post('/upload', formData, {
    headers: {
      'Content-Type': 'multipart/form-data',
    },
  });
};
```

---

## üì¶ Pagination, Params, Headers

```ts
export const getUsersPaginated = (page: number, limit: number) => {
  return axiosInstance.get('/users', {
    params: { page, limit },
  });
};
```

---

## ü§ù Final Words

Axios is powerful and flexible. For a React developer:

* Use Axios through a shared instance.
* Keep your API functions decoupled from components.
* Use custom hooks or `react-query` to manage fetching logic.

---

Would you like me to generate a GitHub-ready boilerplate template for you with this setup?
