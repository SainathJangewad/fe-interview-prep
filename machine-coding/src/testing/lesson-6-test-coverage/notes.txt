Here's the formatted and **interview-friendly** version of your notes on **Test Coverage in Vitest**:

---

## ✅ What is Test Coverage?

**Test coverage** measures how much of your code is executed when running your test suite.
It helps identify:

* 🟢 Which lines of code are tested
* 🔴 Which lines are untested (potential bugs)
* 📊 Overall test quality

---

## 📘 Types of Coverage Metrics

* **Statements** – Are all statements executed?
* **Branches** – Are all `if/else` paths covered?
* **Functions** – Are all functions invoked?
* **Lines** – Are all lines of code run?

---

## 🧪 How to Check Test Coverage in Vitest

### 1️⃣ Install Required Dependency

#### ➤ For `v8` (recommended for speed):

```bash
npm install -D @vitest/coverage-v8
```

#### ➤ For `istanbul` (for advanced features):

```bash
npm install -D @vitest/coverage-istanbul
```

---

### 2️⃣ Configure `vitest.config.ts` (or `vite.config.ts`)

```ts
import { defineConfig } from 'vitest/config';

export default defineConfig({
  test: {
    coverage: {
      enabled: true, // Enable coverage
      provider: 'v8', // or 'istanbul'
      reporter: ['text', 'html', 'json'], // Output formats
      // include: ['src/**/*.ts'],
      // exclude: ['node_modules/', 'dist/'],
    },
  },
});
```

🔸 `reporter`: Defines coverage output

* `text`: Summary in terminal
* `html`: Interactive HTML report
* `json`: Structured coverage data

---

### 3️⃣ Run Tests with Coverage

```bash
npx vitest run --coverage
```

✔️ Shows a terminal summary
🌐 For HTML report: Open `coverage/index.html` in your browser

---

## 🖥️ Optional: View Coverage in Vitest UI

```bash
npx vitest --ui
```

📌 Works only if:

* `coverage.enabled = true` in config
* `html` reporter is set

---

## 🎯 Interview Keywords

> Say these to show practical knowledge:

* ✅ "Test coverage improves confidence in code"
* ✅ "Vitest uses `c8` under the hood for coverage"
* ✅ "Helps detect dead code and untested edge cases"
* ✅ "I aim for high branch and line coverage but also care about meaningful tests"
 
---------------------------------------------------------------------------

## ✅ View Specific Files in Coverage

Use `include` in `vitest.config.ts`:

```ts
coverage: {
  enabled: true,
  include: ['src/pages/**/*'],
}
```

Shows coverage **only for matching files**.

---

## 🚫 Omit Files from Coverage

Use `exclude`:

```ts
coverage: {
  exclude: ['**/*.test.*', 'src/pages/utils/**'],
}
```

These files **won’t appear** in the report.

---

## ⚙️ Test Files Still Run

Even if excluded:

* ✅ Test files still **execute**
* ❌ But are **not counted** in coverage

--- 
---------------------------------------------------------------------
Here’s a **short interview-ready note** on **setting coverage thresholds in Vitest**:

---

## ✅ Coverage Thresholds in Vitest

**Purpose**: Enforce minimum test coverage to maintain code quality.

### 📌 How to set:

In `vitest.config.ts`:

```ts
coverage: {
  enabled: true,
  provider: 'v8',
  reporter: ['text', 'html'],
  threshold: {
    statements: 80,
    branches: 75,
    functions: 80,
    lines: 80,
  },
}
```

### 🔍 Metrics:

* **statements**: All executable code
* **branches**: All conditionals (`if`, `switch`)
* **functions**: All defined functions
* **lines**: All lines of code

### 🚨 If thresholds not met:

Test run fails with a message like:

> Coverage for lines (78%) does not meet global threshold (80%)

---

✅ Use this to enforce test quality in CI/CD.
-----------------------------------
**🔍 View HTML Coverage Report in Vitest (Short Note):**

1. In `vitest.config.ts`, set:

```ts
reporter: ['html']
```

2. Run:

```bash
npx vitest run --coverage
```
3. Open:
 go to the 'coverage' folder which is auto created and open the 'html' file there in the brows 

