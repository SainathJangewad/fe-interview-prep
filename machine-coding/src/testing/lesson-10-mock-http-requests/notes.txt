Great! Let's now learn how to **mock HTTP requests using Mock Service Worker (MSW)** — the **most realistic** and recommended way to mock APIs in React tests.

---

## 🛠️ What is MSW?

**Mock Service Worker (MSW)** intercepts actual HTTP requests (like `fetch` or `axios`) and mocks the response **at the network level**.

It works in both:

* **Browser** (for local dev)
* **Test environment** (Node.js, like in Vitest)

---

## ✅ Why use MSW in tests?

| Feature                | Why it helps                              |
| ---------------------- | ----------------------------------------- |
| Intercepts real HTTP   | No need to mock fetch/axios manually      |
| Realistic mocking      | Closer to real app behavior               |
| Works across libraries | Works with any HTTP client (axios, fetch) |

---

## 🔧 Setup MSW in a React Project

```bash
npm install msw --save-dev
```

---

## 🧪 Example: Mocking an API in Test

### 🧩 Step 1: Component

```tsx
// UserProfile.tsx
import { useEffect, useState } from 'react';

export function UserProfile() {
  const [name, setName] = useState('');

  useEffect(() => {
    fetch('/api/user')
      .then(res => res.json())
      .then(data => setName(data.name));
  }, []);

  return <h1>Hello, {name}</h1>;
}

---

### 🧩 Step 2: Create mock handler

// src/mocks/handlers.ts
import { rest } from 'msw';

export const handlers = [
  rest.get('/api/user', (req, res, ctx) => {
    return res(ctx.json({ name: 'MSW User' }));
  }),
];
---

### 🧩 Step 3: Setup MSW server

// src/mocks/server.ts
import { setupServer } from 'msw/node';
import { handlers } from './handlers';

export const server = setupServer(...handlers);
---

### 🧩 Step 4: Initialize in test setup

// src/setupTests.ts
import { server } from './mocks/server';
import { afterAll, afterEach, beforeAll } from 'vitest';
import '@testing-library/jest-dom';

beforeAll(() => server.listen());
afterEach(() => server.resetHandlers());
afterAll(() => server.close());
---

### 🧪 Final Test File

// UserProfile.test.tsx
import { render, screen } from '@testing-library/react';
import { UserProfile } from './UserProfile';

test('loads and displays user', async () => {
  render(<UserProfile />);
  expect(await screen.findByText(/hello, msw user/i)).toBeInTheDocument();
});
---------------------------------------------------------

## ⚠️ Want to Mock Error?

Override the handler inside the test:

import { server } from '../test/mocks/server';
import { rest } from 'msw';

test('shows fallback on API error', async () => {
  server.use(
    rest.get('/api/user', (req, res, ctx) => {
      return res(ctx.status(500));
    })
  );

  render(<UserProfile />);
  // Add your fallback error message check here
});
---

## 🧠 Summary

| Step                      | Purpose                           |
| ------------------------- | --------------------------------- |
| Define `handlers.ts`      | Mock API behavior                 |
| Setup `server.ts`         | Use MSW for intercepting requests |
| Use `server.listen()`     | Enable MSW in tests               |
| Override handlers in test | Simulate error cases easily       |

--------------------------------------------------------

Great! Let’s now learn how to **mock `POST`, `PUT`, and `DELETE` HTTP requests using Mock Service Worker (MSW)**. These are crucial when testing forms or actions that modify server data (e.g., submitting, editing, or deleting).
---

## 🔧 Step-by-Step Setup for MSW (Recap)

Before mocking requests, ensure MSW is installed:

```bash
npm install msw --save-dev

---

## 📦 File Structure

```
src/
  __tests__/
    MyForm.test.tsx
  mocks/
    handlers.ts       ✅ define mock API responses
    server.ts         ✅ setup test server

---

## 🧪 1. Create `handlers.ts`

// mocks/handlers.ts
import { rest } from 'msw';

export const handlers = [
  // ✅ POST - create resource
  rest.post('/api/users', (req, res, ctx) => {
    return res(ctx.status(201), ctx.json({ message: 'User created' }));
  }),

  // ✅ PUT - update resource
  rest.put('/api/users/:id', (req, res, ctx) => {
    const { id } = req.params;
    return res(ctx.status(200), ctx.json({ message: `User ${id} updated` }));
  }),

  // ✅ DELETE - delete resource
  rest.delete('/api/users/:id', (req, res, ctx) => {
    const { id } = req.params;
    return res(ctx.status(204)); // No Content
  }),
];
---

## ⚙️ 2. Create `server.ts`

// mocks/server.ts
import { setupServer } from 'msw/node';
import { handlers } from './handlers';

export const server = setupServer(...handlers);
---

## ✅ 3. Set Up MSW in Your Test Environment

// setupTests.ts (imported in vitest.config.ts or setupFiles)
import { server } from './mocks/server';

beforeAll(() => server.listen());
afterEach(() => server.resetHandlers());
afterAll(() => server.close());
---

## 🧪 4. Example Test for a POST Request

// __tests__/MyForm.test.tsx
import { render, screen, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import MyForm from '../MyForm';

test('submits the form successfully (POST)', async () => {
  render(<MyForm />);

  await userEvent.type(screen.getByLabelText(/name/i), 'Sainath');
  await userEvent.click(screen.getByRole('button', { name: /submit/i }));

  await waitFor(() =>
    expect(screen.getByText(/user created/i)).toBeInTheDocument()
  );
});
---

## 🧪 5. Mocking Errors or Overriding Handlers in Specific Tests

import { server } from '../mocks/server';
import { rest } from 'msw';

test('handles 500 error on submit', async () => {
  server.use(
    rest.post('/api/users', (req, res, ctx) =>
      res(ctx.status(500), ctx.json({ message: 'Server error' }))
    )
  );

  render(<MyForm />);
  await userEvent.type(screen.getByLabelText(/name/i), 'Sainath');
  await userEvent.click(screen.getByRole('button', { name: /submit/i }));

  await waitFor(() =>
    expect(screen.getByText(/server error/i)).toBeInTheDocument()
  );
});
---

## 💡 Summary

| Method | What it Does             | Status Code | Example          |
| ------ | ------------------------ | ----------- | ---------------- |
| POST   | Create a new resource    | 201         | `/api/users`     |
| PUT    | Update existing resource | 200         | `/api/users/:id` |
| DELETE | Remove resource          | 204         | `/api/users/:id` |
