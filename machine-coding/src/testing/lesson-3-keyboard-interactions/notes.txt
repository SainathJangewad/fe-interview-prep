When testing **keyboard interactions** in **React Testing Library** with **user-event**, there are a few **most commonly used keyboard utility APIs** that simulate how users interact with your form or UI via the keyboard.

---

## üîë Most Common `userEvent` Keyboard APIs

All of these come from the `@testing-library/user-event` package.

---

### 1. **`userEvent.type()`**

Simulates typing text (character by character), including special keys.

const input = screen.getByRole('textbox');
await userEvent.type(input, 'Hello world');
```

Supports special keys:

await userEvent.type(input, 'Hello{space}World{backspace}');
```

---

### 2. **`userEvent.keyboard()`**

Simulates raw keypresses ‚Äî very flexible for arrow keys, shortcuts, etc.

// Press Enter key
await userEvent.keyboard('{Enter}');

// Type with modifiers
await userEvent.keyboard('{Control>}{a}{/Control}'); // Ctrl+A

// Simulate arrow keys
await userEvent.keyboard('{ArrowDown}{ArrowDown}');

Useful when navigating dropdowns or menus.

---

### 3. **`userEvent.tab()`**

Simulates a real browser `Tab` key behavior ‚Äî moves focus to the next focusable element.

await userEvent.tab(); // move to next element
await userEvent.tab({ shift: true }); // move to previous element
```
Great for accessibility testing and focus management.

---

### 4. **`userEvent.clear()`**

Clears the content of an input field (as if user selects and deletes it).

const input = screen.getByRole('textbox');
await userEvent.clear(input);
---

### 5. **`userEvent.paste()`**

Simulates pasting content into an input or textarea.

const input = screen.getByRole('textbox');
await userEvent.paste(input, 'Pasted text');
---

## ‚ú® Bonus: Typical Use Cases

| Scenario                          | API                                   |
| --------------------------------- | ------------------------------------- |
| Filling a form input              | `userEvent.type()`                    |
| Pressing Enter to submit a form   | `userEvent.keyboard()`                |
| Navigating a dropdown with arrows | `userEvent.keyboard()`                |
| Navigating focus with Tab key     | `userEvent.tab()`                     |
| Simulating Ctrl+A                 | `userEvent.keyboard()`                |
| Testing backspace/delete behavior | `userEvent.type()` with `{backspace}` |
| Testing paste input               | `userEvent.paste()`                   |

---------------------------------------------

Would you like to see test examples for a dropdown or accessible keyboard navigation?

Sure! Here are **full `.tsx` + test examples** for the keyboard interaction cases:
---

## ‚úÖ 1. Select Option Using Keyboard ‚Äî `.tsx + .test.tsx`

### **`DropdownComponent.tsx`**

import React from 'react';

type Props = {
  value: string;
  onChange: (val: string) => void;
};

const DropdownComponent: React.FC<Props> = ({ value, onChange }) => {
  return (
    <label>
      Choose an option:
      <select value={value} onChange={(e) => onChange(e.target.value)}>
        <option value="">--Choose--</option>
        <option value="option1">Option 1</option>
        <option value="option2">Option 2</option>
      </select>
    </label>
  );
};

export default DropdownComponent;
```

### **`DropdownComponent.test.tsx`**

import { render, screen } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import DropdownComponent from './DropdownComponent';
import { vi } from 'vitest';

test('selects option using keyboard', async () => {
  const handleChange = vi.fn();
  render(<DropdownComponent value="" onChange={handleChange} />);

  const dropdown = screen.getByRole('combobox');
  dropdown.focus();

  await userEvent.keyboard('{ArrowDown}{ArrowDown}{Enter}');

  expect(handleChange).toHaveBeenCalledWith('option1'); // 2nd element
});

---

## ‚úÖ 2. Tab Navigation ‚Äî `.tsx + .test.tsx`

### **`FormComponent.tsx`**

import React from 'react';

const FormComponent = () => {
  return (
    <form>
      <label>
        First Name:
        <input type="text" name="firstName" aria-label="First Name" />
      </label>
      <label>
        Email:
        <input type="email" name="email" aria-label="Email" />
      </label>
    </form>
  );
};

export default FormComponent;
```

### **`FormComponent.test.tsx`**

import { render, screen } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import FormComponent from './FormComponent';

test('navigates through inputs using Tab', async () => {
  render(<FormComponent />);

  const input1 = screen.getByLabelText('First Name');
  const input2 = screen.getByLabelText('Email');

  expect(document.body).toHaveFocus();

  await userEvent.tab(); // to First Name
  expect(input1).toHaveFocus();

  await userEvent.tab(); // to Email
  expect(input2).toHaveFocus();
});
---

## ‚úÖ 3. Submit with Enter Key ‚Äî `.tsx + .test.tsx`

### **`EnterSubmitForm.tsx`**

import React, { useState } from 'react';

type Props = {
  onSubmit: (val: string) => void;
};

const EnterSubmitForm: React.FC<Props> = ({ onSubmit }) => {
  const [text, setText] = useState('');

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onSubmit(text);
  };

  return (
    <form onSubmit={handleSubmit}>
      <input
        type="text"
        value={text}
        onChange={(e) => setText(e.target.value)}
        aria-label="Text Input"
      />
    </form>
  );
};

export default EnterSubmitForm;
```

### **`EnterSubmitForm.test.tsx`**

import { render, screen } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import EnterSubmitForm from './EnterSubmitForm';
import { vi } from 'vitest';

test('submits form on Enter key', async () => {
  const onSubmit = vi.fn();
  render(<EnterSubmitForm onSubmit={onSubmit} />);

  const input = screen.getByLabelText('Text Input');
  await userEvent.type(input, 'hello{Enter}');

  expect(onSubmit).toHaveBeenCalledWith('hello');
});

Here's a minimal **TypeScript + React (.tsx)** component that works with the test case you mentioned:
(selecting dropdown) 
---

### ‚úÖ `MyComponent.tsx`

import React, { useState } from 'react';

const MyComponent: React.FC = () => {
  const [selected, setSelected] = useState('option1');

  return (
    <div>
      <label htmlFor="dropdown">Choose an option:</label>
      <select
        id="dropdown"
        value={selected}
        onChange={(e) => setSelected(e.target.value)}
      >
        <option value="option1">Option One</option>
        <option value="option2">Option Two</option>
        <option value="option3">Option Three</option>
      </select>
    </div>
  );
};

export default MyComponent;
---

### ‚úÖ Matching Test Case

import { render, screen } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import MyComponent from './MyComponent';

test('select option using keyboard', async () => {
  render(<MyComponent />);
  const select = screen.getByRole('combobox');

  // Focus the select
  select.focus();

  // Press ArrowDown twice and Enter to select "Option Two"
  await userEvent.keyboard('{ArrowDown}{ArrowDown}{Enter}');

  // Expect "Option Two" to be selected
  expect(select).toHaveValue('option2');
});
---------------------------
Sure! Below is a **test case** that checks a **file upload input**
---

### ‚úÖ `FileUploadComponent.tsx`

import React, { useState } from 'react';

const FileUploadComponent: React.FC = () => {
  const [fileName, setFileName] = useState('');

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      setFileName(file.name);
    }
  };

  return (
    <div>
      <label htmlFor="file-input">Upload a file:</label>
      <input id="file-input" type="file" onChange={handleChange} />
      {fileName && <p>Uploaded: {fileName}</p>}
    </div>
  );
};

export default FileUploadComponent;
---

### ‚úÖ Test: `FileUploadComponent.test.tsx`

import { render, screen } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import FileUploadComponent from './FileUploadComponent';
import { describe, it, expect } from 'vitest';

describe('File upload', () => {
  it('should display file name after upload', async () => {
    render(<FileUploadComponent />);

    // Create a mock file - this mimics a real file object
    const file = new File(['hello world'], 'hello.txt', { type: 'text/plain' });

    // Find the file input by role
    const input = screen.getByLabelText(/upload a file/i);

    // Upload the file
    // üëá This is a special method from userEvent to simulate file uploads
    await userEvent.upload(input, file);

    // Explanation:
    // userEvent.upload simulates the user selecting a file.
    // It sets the input's `.files` property, and also fires the 'change' event.

    // Now check if the uploaded file name is rendered
    expect(screen.getByText(/uploaded: hello.txt/i)).toBeInTheDocument();
  });
});
---

### üîç Explanation of Weird Syntax:

const file = new File(['hello world'], 'hello.txt', { type: 'text/plain' });
```

* `File` constructor takes three arguments:

  * `['hello world']`: file content (as a Blob or string array).
  * `'hello.txt'`: file name.
  * `{ type: 'text/plain' }`: file MIME type.

---

await userEvent.upload(input, file);
```

* Simulates selecting a file via the browser's file picker.
* Sets the `files` property of the input.
* Dispatches the `change` event so that React's `onChange` handler is triggered.

--------------------
Great question!

No, you **can upload any file type**‚Äî`.txt` was just an example in the test. You can simulate uploads of `.png`, `.pdf`, `.docx`, etc., by creating a `File` object with the appropriate name and MIME type.

---

### üîÅ Example: Uploading a `.png` image file

const imageFile = new File(['dummy image data'], 'photo.png', {
  type: 'image/png',
});

await userEvent.upload(input, imageFile);
---

### üìå Want to restrict allowed file types?

If you **only want to allow specific file types**, you can add the `accept` attribute to the input:

<input type="file" accept=".png,.jpg,.jpeg" />
```

This won't prevent uploading other types programmatically (like in tests), but in real usage it limits what the user can choose in the file dialog.

----------------------------
Yes ‚Äî in addition to the ones we've already discussed like `userEvent.type`, `userEvent.click`, `userEvent.tab`, `userEvent.keyboard`, and `userEvent.upload`, here are **other frequently used and handy utility APIs** from `@testing-library/user-event` that you might find useful in real-world testing:

---

### ‚úÖ 3. `userEvent.hover()` / `userEvent.unhover()`

**Purpose:** Simulates hovering over or out from an element (used with tooltips or hover effects).

const button = screen.getByRole('button', { name: /help/i });
await userEvent.hover(button);
expect(await screen.findByText(/tooltip info/i)).toBeInTheDocument();

await userEvent.unhover(button);
---

### ‚úÖ 4. `userEvent.selectOptions()` / `userEvent.deselectOptions()`

**Purpose:** Select or deselect options in a `<select>` dropdown (including multi-select).

const select = screen.getByRole('listbox'); // or use getByLabelText
await userEvent.selectOptions(select, ['option1', 'option2']);
---

### ‚úÖ 6. `userEvent.dblClick()`

**Purpose:** Simulates double-click ‚Äî useful for editable fields or interactive elements.

const editable = screen.getByText('Double click me');
await userEvent.dblClick(editable);
---

### ‚úÖ 7. `userEvent.pointer()`

**Purpose:** Fine-grained control of pointer interactions (less common, but useful for drag & drop, sliders, etc.).

await userEvent.pointer({
  target: element,
  keys: '[MouseLeft>]', // press down left mouse button
});
---

You're right ‚Äî thanks for pointing that out! Here's a proper `.tsx` component and test example that demonstrates both `selectOptions` and `deselectOptions` (for a multi-select dropdown).

---

### ‚úÖ Component: `FruitSelector.tsx`

// FruitSelector.tsx
import React from 'react';

export const FruitSelector = () => {
  return (
    <div>
      <label htmlFor="fruits">Choose fruits</label>
      <select id="fruits" multiple>
        <option value="apple">Apple</option>
        <option value="banana">Banana</option>
        <option value="cherry">Cherry</option>
        <option value="date">Date</option>
      </select>
    </div>
  );
};
---

### ‚úÖ Test: `FruitSelector.test.tsx`

// FruitSelector.test.tsx
import { render, screen } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { FruitSelector } from './FruitSelector';

describe('FruitSelector', () => {
  it('selects and deselects options', async () => {
    render(<FruitSelector />);
    const select = screen.getByLabelText(/choose fruits/i);

    // Select Apple and Banana
    await userEvent.selectOptions(select, ['apple', 'banana']);
    expect(
      Array.from(select.selectedOptions).map((opt) => opt.value)
    ).toEqual(['apple', 'banana']);

    // Deselect Banana only
    await userEvent.deselectOptions(select, 'banana');
    expect(
      Array.from(select.selectedOptions).map((opt) => opt.value)
    ).toEqual(['apple']);
  });
});
---

### üîç Explanation of Key Parts

await userEvent.selectOptions(select, ['apple', 'banana']);

This simulates the user holding `Ctrl` or `Cmd` and clicking multiple options.

await userEvent.deselectOptions(select, 'banana');

This removes **banana** from the selected list.

--------------------------------------------------------------------