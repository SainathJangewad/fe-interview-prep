src/app/store.ts
import { configureStore } from "@reduxjs/toolkit";
import cartReducer from "../features/cartSlice";

const loadFromLocalStorage = () => {
  try {
    const serializedState = localStorage.getItem("cart");
    if (!serializedState) return undefined;
    return { cart: JSON.parse(serializedState) };
  } catch (e) {
    console.warn("Failed to load cart from localStorage:", e);
    return undefined;
  }
};

const saveToLocalStorage = (state: any) => {
  try {
    const serializedState = JSON.stringify(state.cart);
    localStorage.setItem("cart", serializedState);
  } catch (e) {
    console.warn("Failed to save cart to localStorage:", e);
  }
};

export const store = configureStore({
  reducer: {
    cart: cartReducer,
  },
  preloadedState: loadFromLocalStorage(),
});

store.subscribe(() => saveToLocalStorage(store.getState()));

export type RootState = ReturnType<typeof store.getState>;
export type AppDispatch = typeof store.dispatch;

--------------------------------------------------------------------------------------
main.tsx
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";
import { Provider } from "react-redux";
import { store } from "./app/store";

const rootElement = document.getElementById("root")!;
const root = ReactDOM.createRoot(rootElement);

root.render(
  <React.StrictMode>
    <Provider store={store}>
      <App />
    </Provider>
  </React.StrictMode>
);
------------------------------------------------------------------------------------------------------

src/features/cart/cartSlice.ts
import { createSlice, PayloadAction } from "@reduxjs/toolkit";

interface Product {
  id: number;
  name: string;
  price: number;
}

interface CartItem extends Product {
  quantity: number;
}

interface CartState {
  items: CartItem[];
}

const initialState: CartState = {
  items: [],
};

const cartSlice = createSlice({
  name: "cart",
  initialState,
  reducers: {
    addToCart: (
      state,
      action: PayloadAction<{ product: Product; quantity: number }>
    ) => {
      const existingItem = state.items.find(
        (item) => item.id === action.payload.product.id
      );
      if (existingItem) {
        existingItem.quantity += action.payload.quantity;
      } else {
        state.items.push({
          ...action.payload.product,
          quantity: action.payload.quantity,
        });
      }
    },
    removeFromCart: (state, action: PayloadAction<number>) => {
      state.items = state.items.filter((item) => item.id !== action.payload);
    },
  },
});

export const { addToCart, removeFromCart } = cartSlice.actions;
export default cartSlice.reducer;
export type { Product, CartItem };

---------------------------------------------------------------------------------------
src/features/cart/Cart.tsx
import React from "react";
import { useSelector, useDispatch } from "react-redux";
import { RootState } from "../app/store";
import { removeFromCart } from "./cartSlice";
// import "../../styles/Cart.scss";

const Cart: React.FC = () => {
  const items = useSelector((state: RootState) => state.cart.items);
  const dispatch = useDispatch();

  const total = items.reduce(
    (sum, item) => sum + item.price * item.quantity,
    0
  );

  return (
    <div className="cart">
      <h2>Your Cart</h2>
      {items.length === 0 ? (
        <p>No items in cart</p>
      ) : (
        <ul>
          {items.map((item) => (
            <li key={item.id}>
              {item.name} (x{item.quantity}) - â‚¹{item.price} each = â‚¹
              {item.price * item.quantity}
              <button onClick={() => dispatch(removeFromCart(item.id))}>
                Remove
              </button>
            </li>
          ))}
        </ul>
      )}
      <h3>Total: â‚¹{total}</h3>
    </div>
  );
};

export default Cart;
----------------------------------------------------------------------------------------------------
src/components/ProductList.tsx
// ProductList.tsx
import React, { useState } from "react";
import { useDispatch } from "react-redux";
import { addToCart } from "../features/cartSlice";
import type { Product } from "../features/cartSlice";

const sampleProducts: Product[] = [
  { id: 1, name: "Apple", price: 100 },
  { id: 2, name: "Banana", price: 60 },
  { id: 3, name: "Mango", price: 150 },
];

const ProductList: React.FC = () => {
  const dispatch = useDispatch();
  const [quantities, setQuantities] = useState<{ [key: number]: number }>({});

  const handleQuantityChange = (productId: number, value: string) => {
    const qty = Math.max(1, parseInt(value) || 1);
    setQuantities((prev) => ({ ...prev, [productId]: qty }));
  };

  const handleAdd = (product: Product) => {
    const quantity = quantities[product.id] || 1;
    dispatch(addToCart({ product, quantity }));
  };

  return (
    <div className="product-list">
      <h2>Products</h2>
      <ul>
        {sampleProducts.map((product) => (
          <li key={product.id}>
            {product.name} - â‚¹{product.price}
            <input
              type="number"
              min="1"
              value={quantities[product.id] || 1}
              onChange={(e) => handleQuantityChange(product.id, e.target.value)}
              style={{ width: "60px", marginLeft: "1rem" }}
            />
            <button onClick={() => handleAdd(product)}>Add to Cart</button>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default ProductList;

-----------------------------------------------------------------------------------------------------
app.tsx// App.tsx
import React from "react";
import ProductList from "./components/ProductList";
import Cart from "./features/Cart";
import { useSelector } from "react-redux";
import { RootState } from "./app/store";

const App: React.FC = () => {
  const itemCount = useSelector((state: RootState) =>
    state.cart.items.reduce((sum, item) => sum + item.quantity, 0)
  );

  return (
    <div className="App">
      <header
        style={{
          display: "flex",
          justifyContent: "space-between",
          alignItems: "center",
        }}
      >
        <h1>Redux Cart Example</h1>
        <div style={{ fontWeight: "bold" }}>ðŸ›’ Items in Cart: {itemCount}</div>
      </header>

      <ProductList />
      <Cart />
    </div>
  );
};

export default App;
----------------------------------------------