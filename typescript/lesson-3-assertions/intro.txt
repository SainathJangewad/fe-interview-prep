
## 🧠 Lesson: Type Assertions in TypeScript

### ✅ What is a Type Assertion?

TypeScript lets you **override its type inference** when **you know more** about the value than TypeScript does.
const val = someValue as string;
```

You’re telling TypeScript:

> “Trust me — this is a string.”

---

## 💡 Why do we use assertions?

1. When **TS can’t infer** the right type.
2. To **avoid strict type errors**.
3. To help when using **DOM APIs**, **refs**, or **external libraries**.

---

## 🛠 Common Real-World Examples in React

---

### 1. **Asserting DOM Elements**
const el = document.getElementById("myDiv") as HTMLElement;
el.style.backgroundColor = "blue";
```

🔍 Why?
Because `getElementById()` returns `HTMLElement | null`, so you must assert to safely access `.style`.

---

### 2. **With React Refs**
const inputRef = useRef<HTMLInputElement>(null);

useEffect(() => {
  inputRef.current?.focus();
}, []);
```

OR when you use non-null assertion:
inputRef.current!.focus(); // "I’m sure it’s not null"
```

🔍 Why?
`ref.current` is possibly `null`, and TS complains.
The `!` tells TS: "Don't worry, it's there."
---

### 4. **Custom Types from JSON**
const data = JSON.parse(jsonString) as MyType;
```

🔍 Why?

Because `JSON.parse()` returns `any`, and you assert to add proper type safety.

---

### 5. **Forced Narrowing**
type Animal = { type: "cat"; meow: () => void } | { type: "dog"; bark: () => void };

const pet = getPet();
(pet as { type: "dog"; bark: () => void }).bark();
```

🔍 Why?
You narrow down the union type when you’re **sure** what variant it is.

---

## ⚠️ Be Careful!

* **Don’t use assertions blindly.**
* You’re skipping TS safety checks.
* If you’re wrong, it crashes at runtime.

---

## ✅ Safer Alternatives

Instead of:
const el = document.getElementById("id") as HTMLElement;
```

Do:
const el = document.getElementById("id");
if (el instanceof HTMLElement) {
  el.style.color = "red";
}
--------------------------------------------
Conditionally narrow a union type

type User = { type: "user"; username: string };
type Admin = { type: "admin"; accessLevel: number };
type Person = User | Admin;

const person: Person = getPerson();

if (person.type === "admin") {
  console.log((person as Admin).accessLevel);
}

⚠️ Warning
Type assertions do not perform type checking at runtime. You are telling TypeScript: “Trust me, I know what I’m doing.”
---------------------------

