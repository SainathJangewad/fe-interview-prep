
## üöÄ TypeScript Class Basi### 1Ô∏è‚É£ **Declaring a Class**

class Person {
  name: string;
  constructor(name: string) {
    this.name = name;
  }

  greet() {
    console.log(`Hello, ${this.name}`);
  }
}
```

* `class` keyword creates a blueprint.
* `constructor` initializes values.
* `this` refers to the instance.

---

### 2Ô∏è‚É£ **Access Modifiers**

class User {
  public name: string;        // accessible everywhere
  private age: number;        // accessible only inside class.not outside (outside means accessing the property by object instance)
  protected role: string;     // accessible inside class + subclasses

  constructor(name: string, age: number, role: string) {
    this.name = name;
    this.age = age;
    this.role = role;
  }
}
```

---

### 3Ô∏è‚É£ **Readonly Properties**

class Config {
  readonly apiKey: string;
  constructor(apiKey: string) {
    this.apiKey = apiKey;
  }
}
```

* Can be assigned once, then it's locked.

---

### 4Ô∏è‚É£ **Inheritance with `extends`**

class Animal {
  speak() {
    console.log("Animal speaks");
  }
}

class Dog extends Animal {
  speak() {
    console.log("Dog barks");
  }
}
```

---

### 5Ô∏è‚É£ **Implementing Interfaces**

interface Printable {
  print(): void;
}

class Report implements Printable {
  print() {
    console.log("Printing report...");
  }
}
```

---

### 6Ô∏è‚É£ **Generic Class (basic)**

class Box<T> {
  value: T;
  constructor(val: T) {
    this.value = val;
  }
}
```

---

## üß† Short Note (Interview-Ready)

### üìå TypeScript Class Quick Summary

| Feature       | Description                               |
| ------------- | ----------------------------------------- |
| `class`       | Defines a blueprint for objects           |
| `constructor` | Runs when object is created               |
| `public`      | Accessible from anywhere (default)        |
| `private`     | Only inside class                         |
| `protected`   | Inside class and subclasses               |
| `readonly`    | Set once, can't be changed                |
| `extends`     | Inheritance between classes               |
| `implements`  | Enforces class structure from interface   |
| `class<T>`    | Generic class (type-safe, reusable logic) |

‚úÖ As a React dev, focus on:

* `constructor`, `public/private`
* `extends`, `implements`
* `generic class` (used in utilities)
-------------------------------