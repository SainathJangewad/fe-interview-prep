
1) Tell me about yourself
-> I'm a frontend developer with 2.5 years of experience, and I hold a Bachelor's degree in Computer Science. I previously worked at Arraypointer as a React developer, where I was responsible for building and maintaining various web applications — including e-commerce platforms, e-learning websites, and other responsive, user-facing pages. My work involved working with React, JavaScript, TypeScript, Redux, and API integrations.Now that I’ve moved on from Arraypointer, I’m looking for new opportunities where I can take on more challenging frontend work and continue growing.

2) Do u have any Q for us?
->Can you tell me a bit about the company culture and what it’s like working ?


3) ur strengths and weakness?
->
strengths:
Quick learner: 
"I pick up new tools and concepts quickly. For example, when I started working at my last job, I learned Redux and TypeScript on the go, which helped me contribute faster to projects."

Weakness:
Asking for help:
"Sometimes, I try to solve problems on my own for too long instead of asking for help early. I’m working on recognizing when collaboration can save time and improve results."

4)Why left prev company?
->

--------------------------------**-----------------------
5)Tell us about ur project i.e. myfamilymart.in 
-> I worked on building an e-commerce app similar to Blinkit, which allows users to quickly order groceries online. My role was the frontend developer, and I used React to build responsive UI components. I implemented features like product browsing, filtering, a shopping cart, user login/logout, and real-time order tracking. For state management, I used Redux, and integrated with REST APIs for all backend data. One challenge was ensuring fast load times even with many products, so I used lazy loading and code splitting to optimize performance. The app handled high traffic well, and users found the interface easy to use.

-------------------------------------------------------------------------------
5)Explain the architecture of this project?
->I organized the frontend into folders for components, pages, redux (slices and store), and services for API calls. It’s a React SPA using React Router for navigation. Redux manages global state like products, cart, and user info. The frontend talks to the backend through REST APIs with Axios. I used lazy loading and code splitting to improve performance.
------------------------------------------------------------------------------
Alright, here’s a **quick-answer sheet** for your Blinkit-like React project interview questions — all in **simple language** so you can recall fast.

---

### **1. Project Understanding**

**Q:** Can you walk me through the architecture of your project?
**A:** *"I structured the frontend into folders for components, pages, Redux (slices and store), and services for API calls. It’s a React SPA using React Router. Redux manages global state like products, cart, and user info. The frontend talks to the backend via REST APIs using Axios. I also used lazy loading and code splitting for better performance."*

**Q:** Why React?
**A:** *"React is component-based, fast, and reusable. It also has a strong ecosystem with Redux and React Router, which fit the app needs."*

---

### **2. State Management**

**Q:** Why Redux over Context API?
**A:** *"Redux is better for large apps with many components needing the same data. It has predictable state management and good debugging tools."*

**Q:** How did you keep cart data after refresh?
**A:** *"I synced Redux state with localStorage so data stays after refresh."*

---

### **3. API Integration**

**Q:** How did you handle API errors?
**A:** *"I used try/catch in async functions and showed error messages to the user. Also, Axios interceptors for common error handling."*

**Q:** How did you manage loading states?
**A:** *"Each API call updates a loading flag in Redux or local state, and I showed a spinner until data loaded."*

---

### **4. Performance**

**Q:** How did you do lazy loading and code splitting?
**A:** *"I used `React.lazy` and `Suspense` for components and route-level code splitting so the browser only loads what’s needed."*

**Q:** Any memoization?
**A:** *"Yes, I used `React.memo` for components and `useCallback` for functions that were passed as props to avoid re-renders."*

---

### **5. Features**

**Q:** How did you do product filtering?
**A:** *"I stored filter state in Redux and applied filters on the product list before rendering."*

**Q:** How did you do real-time order tracking?
**A:** *"The backend sent updated order status via polling APIs at intervals, and the frontend updated Redux state."*

---

### **6. Challenges**

**Q:** Biggest challenge?
**A:** *"Handling fast performance with many products. I solved it using lazy loading, pagination, and optimized rendering with memoization."*
-------------------------------
Alright — here’s the **rapid-fire 1-liner version** so you can answer instantly in interviews without overthinking:

---

## **Patient Management System – Rapid Fire**

* **Project:** Patient data & appointment management platform.
* **Role:** Built responsive UI modules, integrated APIs.
* **Responsiveness:** Used Flexbox/Grid + media queries.
* **API Integration:** Axios calls with proper loading/error states.
* **Performance:** `React.lazy` + `Suspense` for routes/components.
* **Improvement:** Faster initial load by loading only needed code.
* **Best Practices:** Modular structure, reusable components, clean state handling.

---

## **E-learning Platform – Rapid Fire**

* **Project:** Course platform for grades 1–12 & competitive exams.
* **Role:** Built responsive UI, filters, video content display.
* **Filtering:** Controlled inputs + array filtering + debouncing.
* **Video Display:** HTML5 `<video>` with custom styling.
* **Real-time Data:** API integration with React hooks state updates.
* **UI Friendliness:** Clear layout, mobile-first design, consistent styling.
* **Challenge:** Large data load → solved via pagination + lazy loading.

------------------
If they ask you to show how you used `<video>` in the **E-learning Platform**, you can give them a **very short React JSX snippet** like this:

```tsx
<video 
  width="100%" 
  height="auto" 
  controls 
  poster={course.thumbnail}  // optional thumbnail
>
  <source src={course.videoUrl} type="video/mp4" />
  Your browser does not support the video tag.
</video>
```

### Key points to mention if they dig deeper:

* Used **`controls`** to let users play/pause/seek.
* **`poster`** displays a thumbnail before playing.
* Used **responsive styling** (`width="100%"`, `height="auto"`) so it works on all devices.
* For better UX, sometimes wrapped it in a container with custom CSS for spacing.
* Tested in Chrome, Firefox, Safari, and mobile browsers for compatibility.

If they ask **"Did you use any library?"** → say:

> No, HTML5 `<video>` tag was sufficient for our needs, but I’m aware of libraries like `react-player` for more advanced controls.

------------------------------



