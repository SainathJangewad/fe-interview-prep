useMemo() Hook - Interview Notes

What is useMemo?
A React hook used to memoize (cache) expensive computations.
Returns a memoized value that only recalculates when dependencies change.
Helps optimize performance by avoiding unnecessary re-renders.

Syntax:
const memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);

First argument: Function that returns the computed value.(this cb must NOT take any arguments)
Second argument: Array of dependencies. Recalculates only if dependencies change.

When to use:
Expensive calculations: Avoid recalculating heavy operations on every render.
Referential equality: Prevent unnecessary re-renders when passing objects or arrays as props.

Key Points:
Not for side effects: Use useEffect for side effects, not useMemo.
Dependency array: Always include all dependencies to avoid bugs.
Overuse: Avoid premature optimization; only use when performance issues arise.
------

Code Example: Performance Issue Without useMemo
Problem:
Expensive computation runs on every render, even when inputs havenâ€™t changed.

import React, { useState } from 'react';

function App() {
  const [count, setCount] = useState(0);
  const [items] = useState([1, 2, 3, 4, 5]);

  // Expensive calculation (runs on every render)
  const total = items.reduce((acc, item) => {
    console.log('Recalculating...'); // Logs every render
    return acc + item;
  }, 0);

  return (
    <div>
      <p>Total: {total}</p>
      <button onClick={() => setCount(count + 1)}>Re-render ({count})</button>
    </div>
  );
}

export default App;

Issue:
Clicking the button triggers a re-render, causing the reduce function to recalculate unnecessarily.
Performance impact: Slows down the app if the computation is heavy.

Fix with useMemo:
const total = useMemo(() => {
  console.log('Recalculating...'); // Only logs when `items` changes
  return items.reduce((acc, item) => acc + item, 0);
}, [items]);

Key Takeaway:
Without useMemo, expensive calculations run on every render, causing performance bottlenecks.
------------------------------------------------------------------------------------------------------
Q.so if count value is 4 now and i increment it to 5 calculation will be done.then if i reduce the coun t back to 4 will the catchebe return or recompute?

ANS - If count was 4, then changed to 5, and then back to 4, the calculation will be recomputed and not returned from cache.

Why?
useMemo() does not persist cache indefinitely.
When dependencies change, React discards the old cached value and computes a new one.
Since the value 4 was already removed from the cache when count changed to 5, React will recompute it when you go back to 4.
 
function App() {
  const [count, setCount] = useState(0)
  const [count2, setCount2] = useState(0)


    const sqrt = useMemo(() => { 
    console.log('calculating...')
    return count * count;
  }, [count])


  return <div className="App"> 
    <button onClick={() => setCount2(count2 + 1)}>inc2</button>
    <button onClick={() => setCount(count + 1)}>inc</button>
    <button onClick={() => setCount(count - 1)}>dec</button>
    <div>sqrt : {sqrt}</div> 
  </div>

}
