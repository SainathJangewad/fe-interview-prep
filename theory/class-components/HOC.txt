Higher-Order Components (HOC)

What are Higher-Order Components (HOC) in React?
How do you create and use an HOC in class-based components?

Higher-Order Components (HOC) in React
A Higher-Order Component (HOC) is a function that takes a component and returns a new component with additional props or functionality. It is a pattern used for code reusability, logic abstraction, and component composition in React.

How to Create and Use an HOC in Class-Based Components
Since HOCs are just functions, they work with both functional and class-based components. Below is a step-by-step guide to creating and using an HOC with a class component.

Example:

// withAuth.js (Higher-Order Component for Authentication)
import React, { Component } from "react";
import { Navigate } from "react-router-dom"; // React Router for redirection

const withAuth = (WrappedComponent) => {
  return class extends Component {
    render() {
      const isAuthenticated = localStorage.getItem("token"); // Example auth check

      console.log(this.props); // üîç Props available in the anonymous class

      if (!isAuthenticated) {
        return <Navigate to="/login" />;
      }

      return <WrappedComponent {...this.props} />;
    }
  };
};

export default withAuth;

// Dashboard.js (Protected Class-Based Component)
import React, { Component } from "react";

class Dashboard extends Component {
  render() {
    return <h2>Welcome to the Dashboard!</h2>;
  }
}

export default Dashboard;

// ProtectedDashboard.js (Wrap Dashboard with withAuth HOC)
import withAuth from "./withAuth";
import Dashboard from "./Dashboard";

const ProtectedDashboard = withAuth(Dashboard);
export default ProtectedDashboard;

// App.js (Using ProtectedDashboard in Routes)
import React from "react";
import ProtectedDashboard from "./ProtectedDashboard";
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";

const App = () => {
  return (
    <Router>
      <Routes>
        <Route path="/dashboard" element={<ProtectedDashboard />} />
        <Route path="/login" element={<h2>Login Page</h2>} />
      </Routes>
    </Router>
  );
};

export default App;
------------------------------------------------------------------------
here why u spreading this.propbs and 'this.props' belong to which class? im confused

Think of it Like a Security Guard
Imagine you are going to a VIP party (which represents the Dashboard component), but there's a security guard (which represents withAuth).

If you have an entry pass (localStorage.getItem("token")), the guard lets you in.
If you don‚Äôt have a pass, the guard redirects you (Navigate to "/login").
The security guard doesn't change who you are; it just decides if you can enter or not.

Now, if someone gave you a VIP badge (props), the security guard should let you keep it when you enter the party.
-------------------
Code Flow Breakdown

Step 1: Normal Component (Before HOC)
class Dashboard extends React.Component {
  render() {
    return <h2>Welcome {this.props.name} to the Dashboard!</h2>;
  }
}

// Usage:
<Dashboard name="Alice" />;
// Output: Welcome Alice to the Dashboard!

‚úÖ Works fine! name prop is passed directly
-------
Step 2: Wrapping Dashboard with an HOC
Now, we introduce a Higher-Order Component (withAuth).

const withAuth = (WrappedComponent) => {
  return class extends React.Component {
    render() {
      const isAuthenticated = localStorage.getItem("token");

      if (!isAuthenticated) {
        return <Navigate to="/login" />;
      }

      return <WrappedComponent {...this.props} />; // ‚úÖ Spreading props
    }
  };
};
---------
Step 3: Wrap Dashboard in withAuth
const ProtectedDashboard = withAuth(Dashboard);

Now, when we use <ProtectedDashboard name="Alice" />, the props (name="Alice") are first received by the HOC (withAuth).

To ensure Dashboard still gets name="Alice", the HOC does:
<WrappedComponent {...this.props} />

Final Flow (Step-by-Step)
1Ô∏è‚É£ User writes:
<ProtectedDashboard name="Alice" />


name="Alice" is sent as a prop.
2Ô∏è‚É£ React first renders withAuth (HOC).

this.props.name === "Alice" inside withAuth.
3Ô∏è‚É£ HOC checks authentication:

If not authenticated, redirect to /login.
If authenticated, render <WrappedComponent {...this.props} />.
4Ô∏è‚É£ WrappedComponent (Dashboard) now receives this.props.name === "Alice", just like before.
---
Conclusion
üîπ this.props inside withAuth refers to props passed to the HOC.
üîπ {...this.props} ensures the original props are passed down to Dashboard.
üîπ Without {...this.props}, Dashboard would lose the props.

NOTe - In the withAuth HOC, this.props belongs to the anonymous class that extends Component.


